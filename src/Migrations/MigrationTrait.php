<?php

namespace App\Migrations;

/**
 * @deprecated
 */
trait MigrationTrait
{
    use AddMultipleSqlTrait;

    public function isTransactional(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    private function updateSetNullForFk(
        string $table,
        string $column,
        ?string $refTable = null,
        string $refColumn = 'id',
    )
    {
        $this->addSql("update {$table} set {$column} = null where {$column} = 0 or {$column} NOT IN (SELECT {$refColumn} FROM {$refTable})");
    }

    private function deleteForFK(
        string $table,
        string $column,
        ?string $refTable = null,
        string $refColumn = 'id',
    )
    {
        $this->addSql("delete from {$table} where {$column} = 0 or {$column} NOT IN (SELECT {$refColumn} FROM {$refTable})");
    }

    private function renameIndex(
        string $table,
        string $column,
        string $oldIndex,
        string $newIndex,
        ?string $oldForeignKey = null,
        ?string $newForeignKey = null,
        ?string $refTable = null,
        ?string $action = null,
        string $refColumn = 'id',
    ) {
        if ($action === 'delete') {
            $this->deleteForFK($table, $column, $refTable, $refColumn);
        }
        if ($action === 'update') {
            $this->updateSetNullForFk($table, $column, $refTable, $refColumn);
        }
        $multipleSql = "
            alter table {$table}
                drop foreign key {$oldForeignKey};
            drop index {$oldIndex} on {$table};
            create index {$newIndex} on {$table} ({$column});
            alter table {$table}
                add constraint {$newForeignKey}
                    foreign key ({$column}) references {$refTable} ({$refColumn});
        ";
        $this->addMultipleSql($multipleSql);
    }
}
